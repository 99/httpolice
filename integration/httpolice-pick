#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import io
import os
import sys

import httpolice
import httpolice.reports
from httpolice.util.seven import stdio_as_text


def main():
    parser = argparse.ArgumentParser(
        description=u'Run HTTPolice on streams collected by tcpick.')
    parser.add_argument(u'-H', u'--html', action=u'store_true',
                        help=u'render HTML report instead of plain text')
    parser.add_argument(u'--only-with-notices', action=u'store_true',
                        help=u'exclude connections that have no notices')
    parser.add_argument(u'streams_dir')
    args = parser.parse_args()

    inputs = []
    for name in os.listdir(args.streams_dir):
        if ('.serv.' not in name) or (not name.endswith('.dat')):
            continue
        _, n, _ = name.rsplit('.', 2)
        if n.isdigit():
            n = int(n)
        else:
            n = 0
        inbound = os.path.join(args.streams_dir, name)
        outbound = os.path.join(args.streams_dir,
                                name.replace('.serv.', '.clnt.'))
        if not os.path.exists(outbound):
            sys.stderr.write('No outbound stream %s, skipping\n' %
                             os.path.basename(outbound))
            continue
        inputs.append((inbound, outbound, (os.stat(inbound).st_ctime, n)))

    inputs.sort(key=lambda entry: entry[2])
    exchanges = _generate_exchanges(inputs, args.only_with_notices)

    if args.html:
        report = httpolice.reports.html_report
    else:
        report = httpolice.reports.text_report
    report(exchanges, stdio_as_text(sys.stdout))

def _generate_exchanges(inputs, only_with_notices=False):
    for inbound, outbound, _ in inputs:
        with io.open(inbound, 'rb') as f:
            inbound_stream = f.read()
        with io.open(outbound, 'rb') as f:
            outbound_stream = f.read()
        exchanges = httpolice.analyze_streams(inbound_stream, outbound_stream,
                                              scheme=u'http')
        for exch in exchanges:
            if args.only_with_notices or any(exch.collect_complaints()):
                yield exch

if __name__ == '__main__':
    sys.exit(main())
