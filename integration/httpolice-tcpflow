#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import io
import os
import sys

import httpolice
from httpolice.util.seven import stdio_as_text


def sniff_server(path):
    with io.open(path, 'rb') as stream:
        return stream.read(7) == b'HTTP/1.'


def main():
    parser = argparse.ArgumentParser(
        description=u'Run HTTPolice on streams collected by tcpflow.')
    parser.add_argument(u'-H', u'--html', action=u'store_true',
                        help=u'render HTML report instead of plain text')
    parser.add_argument(u'--only-with-notices', action=u'store_true',
                        help=u'exclude connections that have no notices')
    parser.add_argument(u'streams_dir')
    args = parser.parse_args()

    inputs = []
    names = sorted(os.listdir(args.streams_dir))
    while names:
        name = names.pop(0)
        if name in ['alerts.txt', 'report.xml']:
            continue
        parts = name.split('-')
        if len(parts) != 4:
            sys.stderr.write('skip bad filename %s\n' % name)
        (timestamp, counter, src_addr, dest_addr) = parts

        other_name = '-'.join((timestamp, counter, dest_addr, src_addr))
        if other_name not in names:
            sys.stderr.write('skip %s - no corresponding %s\n' %
                             (name, other_name))
            continue
        names.remove(other_name)

        path = os.path.join(args.streams_dir, name)
        other_path = os.path.join(args.streams_dir, other_name)

        if sniff_server(path):
            inputs.append((other_path, path))
        elif sniff_server(other_path):
            inputs.append((path, other_path))
        else:
            sys.stderr.write('skip %s and %s - could not detect server\n' %
                             (name, other_name))

    result = []
    for (inbound_path, outbound_path) in inputs:
        with io.open(inbound_path, 'rb') as f:
            inbound_stream = f.read()
        with io.open(outbound_path, 'rb') as f:
            outbound_stream = f.read()
        conn = httpolice.analyze_streams(inbound_stream, outbound_stream,
                                         scheme=u'http')
        if (not args.only_with_notices) or any(conn.collect_complaints()):
            result.append(conn)

    if args.html:
        report_cls = httpolice.HTMLReport
    else:
        report_cls = httpolice.TextReport
    report_cls.render(result, stdio_as_text(sys.stdout))

if __name__ == '__main__':
    sys.exit(main())
